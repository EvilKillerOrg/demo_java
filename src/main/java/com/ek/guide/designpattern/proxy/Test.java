package com.ek.guide.designpattern.proxy;
/**
 * 代理模式:
 * 1.核心角色:
 *  抽象角色 - 定义代理角色和真实角色的公共对外方法
 * 
 *  真实角色 - 实现抽象角色,定义真实角色所要实现的业务逻辑,供代理角色调用.(关注真正的业务逻辑)
 *  代理角色 - 实现抽象角色,是真实角色的代理,通过真实角色的业务逻辑方法来实现抽象方法,并可以附加自己的操作.(将统一的流程控制放到代理角色中处理)
 *
 * 2.应用场景:
 *  安全代理 - 屏蔽对真实角色的直接访问.
 *  远程代理 - 通过代理类处理远程方法调用.
 *  延迟加载 - 先加载轻量级的代理对象,真正需要再加载真实对象.
 *  
 * 3.分类:
 *  静态代理(静态定义代理类)
 *  动态代理(动态生成代理类)
 *   JDK自带的动态代理
 *   javaassist字节码操作库实现
 *   CGLIB
 *   ASM(底层使用指令,可维护性较差)
 */
public class Test {

}